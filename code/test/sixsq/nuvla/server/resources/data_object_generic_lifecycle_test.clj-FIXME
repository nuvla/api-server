(ns sixsq.nuvla.server.resources.data-object-generic-lifecycle-test
  (:require
    [clojure.test :refer [deftest join-fixtures use-fixtures]]
    [sixsq.nuvla.server.app.params :as p]
    [sixsq.nuvla.server.middleware.authn-info-header :refer [authn-info-header]]
    [sixsq.nuvla.server.resources.common.utils :as u]
    [sixsq.nuvla.server.resources.data-object :as eo]
    [sixsq.nuvla.server.resources.data-object-lifecycle-test-utils :as eoltu]
    [sixsq.nuvla.server.resources.data-object-template :as eot]
    [sixsq.nuvla.server.resources.data-object-template-generic :as generic]
    [sixsq.nuvla.server.resources.lifecycle-test-utils :as ltu]
    [peridot.core :refer :all]))


(use-fixtures :once (join-fixtures [ltu/with-test-server-fixture
                                    eoltu/create-connector-fixture!
                                    eoltu/create-cloud-cred-fixture!
                                    eoltu/s3-redefs!]))

(def base-uri (str p/service-context eo/resource-name))

(defn data-object
  []
  {:bucket-name      "my-bucket"
   :object-store-cred {:href eoltu/*cred-uri*}
   :content-type     "application/gzip"
   :object-name      "my/obj/name-1"})


(deftest lifecycle
  (eoltu/full-eo-lifecycle (str p/service-context eot/resource-url "/" generic/object-type)
                           (data-object)))


(deftest bad-methods
  (let [resource-uri (str p/service-context (u/new-resource-id eo/resource-name))]
    (ltu/verify-405-status [[base-uri :options]
                            [base-uri :delete]
                            [resource-uri :options]
                            [resource-uri :post]])))


